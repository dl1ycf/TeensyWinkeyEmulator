diff --git a/teensy4/usb_audio.cpp b/teensy4/usb_audio.cpp
index eef4392..1a4df61 100644
--- a/teensy4/usb_audio.cpp
+++ b/teensy4/usb_audio.cpp
@@ -63,6 +63,12 @@ uint8_t usb_audio_sync_rshift;
 
 uint32_t feedback_accumulator;
 
+// DL1YCF:
+// two new variables for the "damped oscillator"
+// feedback loop
+int32_t feedback_speed_correction;   // buffer for the speed correction
+uint16_t old_incoming_count;         // measuring the speed
+
 volatile uint32_t usb_audio_underrun_count;
 volatile uint32_t usb_audio_overrun_count;
 volatile uint16_t usb_audio_block_count;
@@ -101,6 +107,9 @@ void usb_audio_configure(void)
 #else
 	feedback_accumulator = 739875226; // 44.1 * 2^24
 #endif
+        // DL1YCF: init the two new variables
+        feedback_speed_correction = 0;
+        old_incoming_count=0;
 	if (usb_high_speed) {
 		usb_audio_sync_nbytes = 4;
 		usb_audio_sync_rshift = 8;
@@ -242,6 +251,9 @@ void usb_audio_receive_callback(unsigned int len)
 				AudioInputUSB::incoming_count = count + avail;
 				if (len > 0) {
 					usb_audio_overrun_count++;
+                                        // the measured speed will be too low if we
+                                        // do not account for "ignored" incoming samples
+                                        old_incoming_count -= len;
 					//Serial.print("U");
 					//Serial.println(len);
 					//printf("!");
@@ -290,29 +302,80 @@ void AudioInputUSB::update(void)
 	right = ready_right;
 	ready_right = NULL;
 	uint16_t c = incoming_count;
+        uint16_t d = old_incoming_count;
+        old_incoming_count = incoming_count;
 	uint8_t f = receive_flag;
 	receive_flag = 0;
 	__enable_irq();
-	if (f && left && right) {
-		int diff = AUDIO_BLOCK_SAMPLES/2 - (int)c;
-		feedback_accumulator += diff * 1;
-		//uint32_t feedback = (feedback_accumulator >> 8) + diff * 100;
-		//usb_audio_sync_feedback = feedback;
 
-		//printf(diff >= 0 ? "." : "^");
-	}
-	//serial_phex(c);
-	//serial_print(".");
-	if (!left || !right) {
-		usb_audio_underrun_count++;
-		//Serial.print("O");
-		//Serial.println(incoming_count);
-		//printf("#"); // buffer underrun - PC sending too slow
-		// USB_AUDIO_48KHZ For some reason there are many underruns during the 1 second of powerup
-		// It seems as if the PC is either sending too short packets, or too infrequent packets at first
-		// The line below causes the feedback_accumulator to be way off
-		if (f) feedback_accumulator += 3500;
-	}
+#if 0
+        //
+        // This prints out the actual value of the feedback
+        // correction (converted to Hz) and the min and max
+        // value of incoming_count few times per second on
+        // the console. This can be used to debug the
+        // feedback control loop
+        //
+        static uint16_t max_buf=0;
+        static uint16_t min_buf=9999;
+        static uint16_t debug=0;
+
+        if (c > max_buf) max_buf=c;
+        if (c < min_buf) min_buf=c;
+
+        if (++debug > 100) {
+           debug=0;
+           Serial.print("Corr= ");
+           Serial.print(feedback_accumulator*0.00005960464477539063);
+           Serial.print(" Min= ");
+           Serial.print(min_buf); 
+           Serial.print(" Max= ");
+           Serial.println(max_buf); 
+           min_buf=9999;
+           max_buf=0;
+        }
+#endif
+
+	if (f) {
+            //
+            // DL1YCF: new feedback "damped oscillator" correction
+            //
+            feedback_accumulator += AUDIO_BLOCK_SAMPLES/2 - (int) c;
+           //
+           // The two "magic" constants 2508 and 2400 correspond to
+           // to a damping ratio of zeta=0.5. To increase zeta to
+           // the "critically damped" case (zeta=1.0),
+           // these two parameters must be doubled.
+           //
+#ifdef USB_AUDIO_48KHZ
+           feedback_speed_correction -= 2508*((int) c - (int) d);
+#else
+           feedback_speed_correction -= 2400*((int) c - (int) d);
+#endif
+           //
+           // "stretch" and average the updates over a long period
+           // to filter out high-frequency oscillations in the incoming
+           // buffer count
+           //
+           if (feedback_speed_correction < -64) {
+              feedback_accumulator -=64;
+              feedback_speed_correction += 64;
+            } else if (feedback_speed_correction > 64) {
+              feedback_accumulator += 64;
+              feedback_speed_correction -=64;
+            }
+            if (!left || !right) {
+              usb_audio_underrun_count++;
+              //
+              // The buffer filling will bump up by one block
+              // since we did not "fetch" the data.
+              // This will compromise the speed measurement.
+              //
+              __disable_irq();
+              old_incoming_count += AUDIO_BLOCK_SAMPLES;
+              __enable_irq();
+            }
+        }
 	if (left) {
 		transmit(left, 0);
 		release(left);
